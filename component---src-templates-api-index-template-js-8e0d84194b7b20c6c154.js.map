{"version":3,"sources":["webpack://gas-companion-docs/./src/templates/api-index-template.js","webpack://gas-companion-docs/./src/components/api-index.js","webpack://gas-companion-docs/./src/utils/slugify.js"],"names":["data","pageContext","title","slug","prefix","console","log","files","edges","isV2","startsWith","regex","undefined","error","filter","node","test","absolutePath","alphaSort","a","b","name","sort","modularFiles","nonModularFiles","concat","description","image","Layout","disableTableOfContents","headings","map","i","key","Link","to","slugify","css","kebabCase","require","module","exports","source","replace"],"mappings":"2UAGA,ECMa,SAAC,GAA2B,IAAzBA,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACZC,EAAK,8BAEHC,EAASF,EAATE,KAH4B,EAKRF,EAApBG,cAL4B,MAKnB,OALmB,EAOpCC,QAAQC,IAAIL,GAEZ,IAAIM,EAAQP,EAAKO,MAAMC,MAiBjBC,EAAOL,EAAOM,WAAP,WACPC,EAdQ,YAANP,EACO,sBAGD,SAANA,EACO,yBAGD,YAANA,EACO,8BADX,EAOJ,QAAcQ,IAAVD,EAEA,OADAN,QAAQQ,MAAM,aACP,yBAGXR,QAAQC,IAAIK,GACZJ,EAAQA,EAAMO,QAAO,gBAAEC,EAAF,EAAEA,KAAF,OAAYJ,EAAMK,KAAKD,EAAKE,iBAEjD,IAAMC,EAAa,SAACC,EAAGC,GAAJ,OAAUD,EAAEJ,KAAKM,KAAOD,EAAEL,KAAKM,MAElD,GAAKZ,EACDF,EAAQA,EAAMe,KAAKJ,OAElB,CACD,IAAMK,EAAehB,EAAMO,QAAO,gBAAEC,EAAF,EAAEA,KAAF,OAAYA,EAAKM,KAAKX,WAAV,QAA+BK,EAAKM,KAAKX,WAAV,cAAiCY,KAAKJ,GAC7GM,EAAkBjB,EAAMO,QAAO,gBAAEC,EAAF,EAAEA,KAAF,QAAcA,EAAKM,KAAKX,WAAV,QAA+BK,EAAKM,KAAKX,WAAV,eAAkCY,KAAKJ,GACzHX,EAAQgB,EAAaE,OAAOD,GAGhC,OACI,yBACI,QAAC,IAAD,CAAKtB,MAAOA,EAAOwB,YA/CJxB,gDA+C8BC,KAAMA,EAAMwB,MA7CnD,MA8CN,QAACC,EAAA,EAAD,CACIC,wBAAwB,EACxB3B,MAAOA,EACP4B,SA3CK,GA4CL3B,KAAMA,IAGN,sJAECI,EAAMwB,KAAI,WAAWC,GAAX,IAAGjB,EAAH,EAAGA,KAAH,OACP,cAAIkB,IAAKlB,EAAKM,OACV,QAAC,EAAAa,KAAD,CAAMC,GAAE,GAAK/B,EAASgC,IAAQrB,EAAKM,OAAUN,EAAKM,WAI1D,aAAGgB,IAAG,GAAN,0CAC0C,QAAC,EAAAH,KAAD,CAAMC,GAAG,4CAAT,uB,0BC3ElDG,EAAcC,EAAQ,OAAtBD,UAQRE,EAAOC,QANS,SAACC,GAGd,OAAO,IAFOJ,EAAUI,IAENC,QAAQ,SAAnB","file":"component---src-templates-api-index-template-js-8e0d84194b7b20c6c154.js","sourcesContent":["import { graphql } from 'gatsby';\nimport ApiDocsComponent from '../components/api-index';\n\nexport default ApiDocsComponent;\n\nexport const query = graphql`\n  query {\n    files: allFile(\n      filter: {extension: {eq: \"xml\"}, relativeDirectory: {regex: \"/^[^\\\\/]+$/\"}}\n    ) {\n      group(field: sourceInstanceName) {\n        totalCount\n      }\n      edges {\n        node {\n          id\n          name\n          extension\n          relativePath\n          relativeDirectory\n          absolutePath\n        }\n      }\n    }\n  }\n`;","import React from 'react';\nimport { css } from '@emotion/react';\n\nimport Layout from '@mklabs/gatsby-theme-docs/src/components/Layout';\nimport Seo from '@mklabs/gatsby-theme-docs/src/components/SEO';\n// import slugify from '@mklabs/gatsby-theme-docs/src/util/slug';\nimport slugify from \"../utils/slugify\";\nimport { Link } from \"gatsby\";\n\nconst Docs = ({ data, pageContext }) => {\n    const title = `Generated API documentation`\n    const description = `${title} for GAS Companion`;\n    const { slug } = pageContext\n    const image = \"\"\n    const { prefix = \"/api\" } = pageContext\n\n    console.log(pageContext)\n\n    let files = data.files.edges\n    const headings = []\n\n    const getRegex = () => {\n        if (prefix === `/v2/api`)  {\n            return /\\/GASCompanionAPI\\//;\n        }\n\n        if (prefix === `/api`)  {\n            return /\\/GASCompanionAPI_v3\\//;\n        }\n\n        if (prefix === `/v5/api`)  {\n            return /\\/GASCompanionAPI_v5\\//;\n        }\n    }\n\n    const isV2 = prefix.startsWith(`/v2/api`)\n    const regex = getRegex();\n    if (regex === undefined)  {\n        console.error(\"no regex\");\n        return <></>;\n    }\n\n    console.log(regex)\n    files = files.filter(({node}) => regex.test(node.absolutePath))\n\n    const alphaSort = ((a, b) => a.node.name < b.node.name)\n\n    if  (isV2) {\n        files = files.sort(alphaSort)\n    }\n    else {\n        const modularFiles = files.filter(({node}) => node.name.startsWith(`MGC`) || node.name.startsWith(`Modular`)).sort(alphaSort)\n        const nonModularFiles = files.filter(({node}) => !(node.name.startsWith(`MGC`) || node.name.startsWith(`Modular`))).sort(alphaSort)\n        files = modularFiles.concat(nonModularFiles)\n    }\n\n    return (\n        <>\n            <Seo title={title} description={description} slug={slug} image={image} />\n            <Layout\n                disableTableOfContents={false}\n                title={title}\n                headings={headings}\n                slug={slug}\n            >\n\n                <p>The API documentation is auto-generated from C++ source files, and describes every Blueprint exposed nodes, functions and events.</p>\n\n                {files.map(({ node }, i) => (\n                    <h3 key={node.name}>\n                        <Link to={`${prefix}${slugify(node.name)}`}>{node.name}</Link>\n                    </h3>\n                ))}\n\n                <p css={css`margin: 48px 0; text-align: center; font-style: italic`}>\n                    API documentation generated thanks to <Link to=\"http://kantandev.com/free/kantan-doc-gen\">Kantan Doc Gen</Link>\n                </p>\n\n            </Layout>\n        </>\n    );\n}\n\nexport default Docs","const { kebabCase } = require(`lodash`)\n\nconst slugify = (source) => {\n    const slug = kebabCase(source)\n\n   return `/${slug}`.replace(/\\/\\/+/g, `/`)\n}\n\nmodule.exports = slugify"],"sourceRoot":""}